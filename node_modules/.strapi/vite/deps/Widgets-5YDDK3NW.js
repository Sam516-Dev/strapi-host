import {
  RelativeTime,
  getBadgeProps
} from "./chunk-MBJYEE7E.js";
import "./chunk-6XCMFBQA.js";
import "./chunk-EBVWQ5LF.js";
import "./chunk-ZQDYOSJL.js";
import "./chunk-EQB66K67.js";
import "./chunk-ZCHXR5VO.js";
import "./chunk-EQNDEPR5.js";
import "./chunk-C7H2BX76.js";
import "./chunk-4MAAW4ZG.js";
import {
  Widget
} from "./chunk-M573ONFI.js";
import "./chunk-3DFMTLGW.js";
import "./chunk-CEYWWE4S.js";
import "./chunk-MQRGIX6T.js";
import "./chunk-QIJGNK42.js";
import "./chunk-AMZFFT4G.js";
import "./chunk-I2US6VWN.js";
import "./chunk-BOTWZGIY.js";
import "./chunk-Q2K4BKEE.js";
import "./chunk-WV7AWSUP.js";
import "./chunk-ELXW6ZNB.js";
import "./chunk-JTU4BKPL.js";
import "./chunk-ZXT7QAFJ.js";
import "./chunk-O7DKKS4W.js";
import "./chunk-54NBORNB.js";
import "./chunk-MB46IWNT.js";
import "./chunk-EP6QPS2E.js";
import "./chunk-Z4BRCVEX.js";
import "./chunk-BFHDKKKG.js";
import "./chunk-PMGMZVLF.js";
import "./chunk-27AYHX4O.js";
import "./chunk-LOKUGSGX.js";
import "./chunk-3RYXZAWR.js";
import "./chunk-MBK4V2X7.js";
import "./chunk-D4WYVNVM.js";
import "./chunk-MMOBCIZG.js";
import "./chunk-CBGF7THM.js";
import "./chunk-K65KIEAL.js";
import "./chunk-4PNCDZYG.js";
import "./chunk-4CNMOGUS.js";
import "./chunk-5QHUAR2G.js";
import "./chunk-K3SSY3BK.js";
import "./chunk-IFOFBKTA.js";
import "./chunk-QWCB7MV2.js";
import "./chunk-EGNP2T5O.js";
import "./chunk-S6BOZAEJ.js";
import "./chunk-SWV54OZA.js";
import {
  useTracking
} from "./chunk-472NUNZC.js";
import "./chunk-CFHLQ5JY.js";
import "./chunk-YXDCVYVT.js";
import "./chunk-PQINNV4N.js";
import "./chunk-VYSYYPOB.js";
import "./chunk-FQUGITWL.js";
import "./chunk-36X67ORM.js";
import "./chunk-WFS3KGXC.js";
import "./chunk-F5EGAWJ2.js";
import {
  adminApi
} from "./chunk-EQWQTUFN.js";
import "./chunk-OXMMBAOO.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-CE4VABH2.js";
import "./chunk-QOUV5O5E.js";
import {
  Badge,
  Box,
  IconButton,
  Table,
  Tbody,
  Td,
  Tr,
  Typography,
  useIntl
} from "./chunk-NZRYZCC5.js";
import "./chunk-5ZC4PE57.js";
import {
  Link,
  useNavigate
} from "./chunk-S65ZWNEO.js";
import "./chunk-FOD4ENRR.js";
import {
  ForwardRef$1z
} from "./chunk-VG5GJPFG.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import {
  dt
} from "./chunk-3CQBCJ3G.js";
import "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/content-releases/dist/admin/components/Widgets.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);

// node_modules/@strapi/content-releases/dist/admin/services/homepage.mjs
var contentManagerApi = adminApi.enhanceEndpoints({
  addTagTypes: [
    "UpcomingReleasesList"
  ]
}).injectEndpoints({
  endpoints: (builder) => ({
    getUpcomingReleases: builder.query({
      query: () => "/content-releases/homepage/upcoming-releases",
      transformResponse: (response) => response.data,
      providesTags: (_, _err) => [
        "UpcomingReleasesList"
      ]
    })
  }),
  overrideExisting: true
});
var { useGetUpcomingReleasesQuery } = contentManagerApi;

// node_modules/@strapi/content-releases/dist/admin/components/Widgets.mjs
var CellTypography = dt(Typography)`
  display: block;
  max-width: 14.4rem;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
var ReleasesTable = ({ items }) => {
  const { formatMessage } = useIntl();
  const { trackUsage } = useTracking();
  const navigate = useNavigate();
  const getEditViewLink = (item) => {
    return `/plugins/content-releases/${item.id}`;
  };
  const handleRowClick = (item) => () => {
    trackUsage("willEditReleaseFromHome");
    const link = getEditViewLink(item);
    navigate(link);
  };
  return (0, import_jsx_runtime.jsx)(Table, {
    colCount: 4,
    rowCount: (items == null ? void 0 : items.length) ?? 0,
    children: (0, import_jsx_runtime.jsx)(Tbody, {
      children: items == null ? void 0 : items.map((item) => (0, import_jsx_runtime.jsxs)(Tr, {
        onClick: handleRowClick(item),
        cursor: "pointer",
        children: [
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(CellTypography, {
              title: item.name,
              variant: "omega",
              textColor: "neutral800",
              children: item.name
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: item.status ? (0, import_jsx_runtime.jsx)(Badge, {
                ...getBadgeProps(item.status),
                children: item.status
              }) : (0, import_jsx_runtime.jsx)(Typography, {
                textColor: "neutral600",
                "aria-hidden": true,
                children: "-"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            children: (0, import_jsx_runtime.jsx)(Typography, {
              variant: "omega",
              textTransform: "capitalize",
              textColor: "neutral600",
              children: item.scheduledAt ? (0, import_jsx_runtime.jsx)(RelativeTime, {
                timestamp: new Date(item.scheduledAt)
              }) : formatMessage({
                id: "content-releases.pages.Releases.not-scheduled",
                defaultMessage: "Not scheduled"
              })
            })
          }),
          (0, import_jsx_runtime.jsx)(Td, {
            onClick: (e) => e.stopPropagation(),
            children: (0, import_jsx_runtime.jsx)(Box, {
              display: "inline-block",
              children: (0, import_jsx_runtime.jsx)(IconButton, {
                tag: Link,
                to: getEditViewLink(item),
                onClick: () => trackUsage("willEditReleaseFromHome"),
                label: formatMessage({
                  id: "content-manager.actions.edit.label",
                  defaultMessage: "Edit"
                }),
                variant: "ghost",
                children: (0, import_jsx_runtime.jsx)(ForwardRef$1z, {})
              })
            })
          })
        ]
      }, item.documentId))
    })
  });
};
var UpcomingReleasesWidget = () => {
  const { formatMessage } = useIntl();
  const { data, isLoading, error } = useGetUpcomingReleasesQuery();
  if (isLoading) {
    return (0, import_jsx_runtime.jsx)(Widget.Loading, {});
  }
  if (error || !data) {
    return (0, import_jsx_runtime.jsx)(Widget.Error, {});
  }
  if (data.length === 0) {
    return (0, import_jsx_runtime.jsx)(Widget.NoData, {
      children: formatMessage({
        id: "content-releases.widget.upcoming-releases.no-data",
        defaultMessage: "No releases"
      })
    });
  }
  return (0, import_jsx_runtime.jsx)(ReleasesTable, {
    items: data
  });
};
export {
  UpcomingReleasesWidget
};
//# sourceMappingURL=Widgets-5YDDK3NW.js.map
